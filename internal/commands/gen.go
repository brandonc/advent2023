//go:build ignore
// +build ignore

package main

import (
	"errors"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
	"time"

	"github.com/brandonc/advent2023/internal/ui"
)

type Solution struct {
	Number  string
	Package string
}

func getNumber(day string) string {
	if !strings.HasPrefix(day, "day") {
		panic("expected day to start with \"day\"")
	}

	start := 3
	if day[start] == '0' {
		start++
	}

	return day[start:]
}

func codeGenerateDay(day int) {
	dayString := strconv.Itoa(day)
	if day < 10 {
		dayString = fmt.Sprintf("0%d", day)
	}

	dayPath := fmt.Sprintf("../../solutions/day%s", dayString)
	daySrcPath := fmt.Sprintf("../../solutions/day%s/day%s.go", dayString, dayString)
	dayTestPath := fmt.Sprintf("../../solutions/day%s/day%s_test.go", dayString, dayString)

	err := os.Mkdir(dayPath, 0755)
	if errors.Is(err, os.ErrExist) {
		ui.Die(fmt.Errorf("day%s already exists", dayString))
	} else if err != nil {
		ui.Die(err)
	}

	f, err := os.Create(daySrcPath)
	ui.Assert(err == nil, fmt.Sprintf("Cannot create %q: %s", daySrcPath, err))
	defer f.Close()
	ui.Die(dayTemplate.Execute(f, struct{ DayPadded string }{DayPadded: dayString}))

	ft, err := os.Create(dayTestPath)
	ui.Assert(err == nil, fmt.Sprintf("Cannot create %q: %s", dayTestPath, err))
	defer ft.Close()
	ui.Die(dayTestTemplate.Execute(ft, struct{ DayPadded string }{DayPadded: dayString}))
}

func codeGenerateCommands() {
	solutions := make([]Solution, 0)
	ui.Die(filepath.WalkDir("../../solutions", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if !d.IsDir() || !strings.HasPrefix(d.Name(), "day") {
			return nil
		}

		solutions = append(solutions, Solution{
			Number:  getNumber(d.Name()),
			Package: d.Name(),
		})

		return nil
	}))

	f, err := os.Create("commands.go")
	ui.Assert(err == nil, fmt.Sprintf("Cannot create \"commands.go\": %s", err))
	defer f.Close()
	ui.Die(packageTemplate.Execute(f, struct {
		Solutions []Solution
	}{
		Solutions: solutions,
	}))
}

func main() {
	if len(os.Args) == 2 && os.Args[1] != "" {
		ui.Assert(
			os.Args[1] == "today" || os.Args[1] == "tomorrow",
			fmt.Sprintf("Unexpected argument %q", os.Args[1]),
		)

		var day = time.Now().Day()
		if os.Args[1] == "tomorrow" {
			day = time.Now().Add(time.Hour * 24).Day()
		}

		codeGenerateDay(day)
	}

	codeGenerateCommands()
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package commands

import (
{{- range .Solutions }}
	"github.com/brandonc/advent2023/solutions/{{.Package}}"
{{- end }}
	"github.com/brandonc/advent2023/solutions/solution"
)

var SolutionCommands = map[string]solution.SolutionFactory{
{{- range .Solutions }}
	"{{.Number}}": {{.Package}}.Factory,
{{- end }}
}
`))

var dayTemplate = template.Must(template.New("").Parse(`package day{{.DayPadded}}

import (
	"io"

	"github.com/brandonc/advent2023/solutions/solution"
)

type day{{.DayPadded}} struct{}

// Factory must exist for codegen
func Factory() solution.Solver {
	return day{{.DayPadded}}{}
}

func (d day{{.DayPadded}}) Solve(reader io.Reader) (any, any, error) {
	return 0, 0, nil
}
`))

var dayTestTemplate = template.Must(template.New("").Parse(`package day{{.DayPadded}}

import (
	"strings"
	"testing"
)

func TestSampleInput(t *testing.T) {
	a1, a2, err := Factory().Solve(strings.NewReader(` + "`" + `2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8` + "`" + `))

	if err != nil {
		t.Fatalf("Expected no error, got %s", err)
	}

	if expected := 0; a1 != expected {
		t.Fatalf("Expected answer 1 to be %d, got %d", expected, a1)
	}

	if expected := 0; a2 != expected {
		t.Fatalf("Expected answer 2 to be %d, got %d", expected, a2)
	}
}
`))
